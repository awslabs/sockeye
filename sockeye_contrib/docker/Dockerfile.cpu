FROM ubuntu:18.04

ENV PYTHON_VERSION=3.6

# Set default shell to /bin/bash
SHELL ["/bin/bash", "-cu"]

# Add default users for Ubuntu and Amazon Linux for ease of use
RUN apt-get update && apt-get install -y --no-install-recommends sudo
RUN groupadd --gid 1000 ubuntu && \
    useradd --uid 1000 --gid ubuntu -G sudo ubuntu && \
    echo "ubuntu ALL=(ALL) NOPASSWD:ALL" >/etc/sudoers.d/ubuntu && \
    mkdir -p /home/ubuntu && \
    chown ubuntu:ubuntu /home/ubuntu
RUN groupadd --gid 500 ec2-user && \
    useradd --uid 500 --gid ec2-user -G sudo ec2-user && \
    echo "ec2-user ALL=(ALL) NOPASSWD:ALL" >/etc/sudoers.d/ec2-user && \
    mkdir -p /home/ec2-user && \
    chown ec2-user:ec2-user /home/ec2-user

# Minimal Python install first to avoid conflicts later
RUN apt-get update && apt-get install -y \
    python-dev \
    python3-dev \
    python3-venv \
    wget
RUN wget -nv https://bootstrap.pypa.io/get-pip.py && \
    python3 get-pip.py
RUN pip3 install --no-cache-dir wheel 'pyyaml>=5.1'

#
# Install Intel MKL
#

RUN apt-get update && apt-get install -y gnupg wget

RUN cd /tmp && \
    wget https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS-2019.PUB && \
    apt-key add GPG-PUB-KEY-INTEL-SW-PRODUCTS-2019.PUB && \
    rm GPG-PUB-KEY-INTEL-SW-PRODUCTS-2019.PUB

RUN echo "deb https://apt.repos.intel.com/mkl all main" > /etc/apt/sources.list.d/intel-mkl.list

RUN apt-get update && apt-get install -y intel-mkl-2019.4-070

#
# Install MXNet
#

# Workaround for making sure DNNL uses MKL
ENV CXXFLAGS="-O3 -march=native -DUSE_MKL -I/opt/intel/mkl/include"
ENV CFLAGS="-O3 -march=native -DUSE_MKL -I/opt/intel/mkl/include"
ENV LD_PRELOAD=/opt/intel/mkl/lib/intel64/libmkl_rt.so

# MXNet dependencies
ENV DEBIAN_FRONTEND=noninteractive
RUN apt-get update && apt-get install -y \
    apt-transport-https \
    awscli \
    build-essential \
    ca-certificates \
    ccache \
    curl \
    gcc-8 \
    g++-8 \
    git \
    google-perftools \
    libatlas-base-dev \
    libcurl4-openssl-dev \
    libjemalloc-dev \
    libhdf5-dev \
    liblapack-dev \
    libopenblas-dev \
    libopencv-dev \
    libssl-dev \
    libtinfo-dev \
    libturbojpeg \
    libzmq3-dev \
    zlib1g-dev \
    libedit-dev \
    libxml2-dev \
    libprotobuf-dev \
    protobuf-compiler \
    ninja-build \
    software-properties-common \
    sudo \
    unzip \
    vim-nox \
    virtualenv
# https://github.com/HaxeFoundation/hashlink/issues/147
RUN ln -s /usr/lib/x86_64-linux-gnu/libturbojpeg.so.0.1.0 /usr/lib/x86_64-linux-gnu/libturbojpeg.so
# MXNet requires CMake 3.13.2+
RUN mkdir /opt/cmake && \
    cd /opt/cmake && \
    wget -nv https://cmake.org/files/v3.13/cmake-3.13.5-Linux-x86_64.sh && \
    sh cmake-3.13.5-Linux-x86_64.sh --prefix=/opt/cmake --skip-license && \
    ln -s /opt/cmake/bin/cmake /usr/local/bin/cmake && \
    rm cmake-3.13.5-Linux-x86_64.sh && \
    cmake --version

# MXNet branch with intgemm support
ENV MXNET_COMMIT=b02dbc3387c38392b1be1570ba1fa7bfe1673d61
RUN cd /opt && \
    git clone https://github.com/kpuatamazon/incubator-mxnet.git mxnet && \
    cd mxnet && \
    git checkout ${MXNET_COMMIT} && \
    git submodule init && \
    git submodule update --recursive

# Build MXNet
RUN cd /opt/mxnet && \
    rm -rf build && \
    mkdir -p build && \
    cd build && \
    cmake -DCMAKE_BUILD_TYPE=Release -DUSE_MKL_IF_AVAILABLE=ON -DUSE_MKLDNN=ON -DUSE_CUDA=OFF -G Ninja -DUSE_INTGEMM=ON -DCMAKE_CXX_COMPILER=g++-8 -DCMAKE_C_COMPILER=gcc-8 .. && \
    ninja -j$(nproc)

# Install MXNet Python
RUN cd /opt/mxnet/python && pip3 install -e .

#
# Install Sockeye
#

# Sockeye Python dependencies
ARG REQS_BASE
RUN pip install --no-cache-dir ${REQS_BASE}

# Install Sockeye, including Docker entry point script
ARG SOCKEYE_COMMIT
# Python dependencies
ARG REQS_BASE
RUN pip install --no-cache-dir ${REQS_BASE}
COPY . /opt/sockeye
RUN cd /opt/sockeye && \
    pip install --no-cache-dir --no-deps --editable .

# Guarantee Intel NumPy
RUN pip3 install intel-numpy
